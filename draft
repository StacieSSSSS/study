import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import TimeSeriesSplit
from sklearn.base import BaseEstimator
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from typing import Union

class FXForecaster:
    def __init__(self, model: Union[BaseEstimator, str] = 'linear', forecast_horizon=30, n_splits=5):
        """
        初始化
        model: sklearn模型或模型名称字符串，如 'linear', 'random_forest'
        forecast_horizon: 未来预测的交易日数
        """
        self.model_name = model
        self.forecast_horizon = forecast_horizon
        self.n_splits = n_splits
        self.model = self._get_model(model)

    def _get_model(self, model):
        if isinstance(model, BaseEstimator):
            return model
        if model == 'linear':
            return LinearRegression()
        elif model == 'random_forest':
            return RandomForestRegressor(n_estimators=100, max_depth=5, random_state=42)
        else:
            raise ValueError(f"Unsupported model: {model}")

    def generate_data(self, n_days=1000, seed=42):
        """
        模拟数据生成：交易日序列 + 宏观变量 + FX价格
        """
        np.random.seed(seed)
        date_range = pd.bdate_range(start="2020-01-01", periods=n_days)
        df = pd.DataFrame(index=date_range)
        df['CPI'] = np.random.normal(2, 0.1, size=n_days)
        df['PMI'] = np.random.normal(50, 2, size=n_days)
        df['Interest_Rate'] = np.random.normal(1.5, 0.05, size=n_days)
        df['FX_Spot'] = 100 + np.cumsum(np.random.normal(0, 0.2, size=n_days))
        df['FX_Forward_1M'] = df['FX_Spot'] * (1 + 0.0005 * self.forecast_horizon)
        return df

    def prepare_data(self, df: pd.DataFrame):
        """
        添加目标变量（未来第N个交易日的现汇价格）
        """
        df['FX_Spot_30d_future'] = df['FX_Spot'].shift(-self.forecast_horizon)
        df = df.dropna()
        return df

    def train_predict(self, df: pd.DataFrame, features: list):
        """
        时间序列训练和预测
        """
        X = df[features]
        y = df['FX_Spot_30d_future']
        preds = np.full(len(df), np.nan)

        tscv = TimeSeriesSplit(n_splits=self.n_splits)
        for train_idx, test_idx in tscv.split(X):
            X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]
            y_train = y.iloc[train_idx]
            model = self._get_model(self.model_name)
            model.fit(X_train, y_train)
            preds[test_idx] = model.predict(X_test)

        df['Prediction'] = preds
        return df

    def generate_signals(self, df: pd.DataFrame):
        """
        根据预测值与远期价格生成交易信号
        """
        df['Signal'] = np.where(df['Prediction'] > df['FX_Forward_1M'], 1, -1)
        return df

    def plot(self, df: pd.DataFrame):
        """
        可视化预测结果
        """
        plt.figure(figsize=(14,6))
        plt.plot(df.index, df['FX_Spot'], label='Spot FX Price', alpha=0.6)
        plt.plot(df.index, df['Prediction'], label=f'Prediction ({self.model_name})', linestyle='--')
        plt.title(f"FX Price Forecast ({self.forecast_horizon} Trading Days Ahead)")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()

    def run(self):
        """
        一键运行流程
        """
        df = self.generate_data()
        df = self.prepare_data(df)
        features = ['CPI', 'PMI', 'Interest_Rate']
        df = self.train_predict(df, features)
        df = self.generate_signals(df)
        self.plot(df)
        return df

# 示例：使用线性回归
fx_model_linear = FXForecaster(model='linear')
df_linear = fx_model_linear.run()
print(df_linear[['FX_Spot', 'FX_Forward_1M', 'Prediction', 'Signal']].tail(5))

# 示例：使用随机森林
fx_model_rf = FXForecaster(model='random_forest')
df_rf = fx_model_rf.run()
print(df_rf[['FX_Spot', 'FX_Forward_1M', 'Prediction', 'Signal']].tail(5))




import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# ==== 1. 数据准备 ====
np.random.seed(42)
date_range = pd.bdate_range(start="2020-01-01", periods=1000)
df = pd.DataFrame(index=date_range)

# 模拟宏观数据
df['CPI'] = np.random.normal(2, 0.05, len(df))
df['PMI'] = np.random.normal(50, 1, len(df))
df['Interest_Rate'] = np.random.normal(1.5, 0.02, len(df))

# 模拟汇率现汇价格和远期价格
df['FX_Spot'] = 100 + np.cumsum(np.random.normal(0, 0.2, len(df)))
df['FX_Forward_1M'] = df['FX_Spot'] * (1 + 0.0005 * 30)

# ==== 2. 构造训练样本：T-180到T-30的宏观平均 → 预测T的远期价格 ====
def construct_features(df, start_lag=180, end_lag=30):
    X_list = []
    y_list = []
    dates = []

    for i in range(start_lag, len(df)):
        start_idx = i - start_lag
        end_idx = i - end_lag

        # 如果窗口不足，跳过
        if end_idx <= start_idx:
            continue

        macro_window = df.iloc[start_idx:end_idx][['CPI', 'PMI', 'Interest_Rate']]
        X_sample = macro_window.mean().values
        y_sample = df.iloc[i]['FX_Forward_1M']

        X_list.append(X_sample)
        y_list.append(y_sample)
        dates.append(df.index[i])

    X = np.array(X_list)
    y = np.array(y_list)
    return X, y, dates

X, y, dates = construct_features(df)

# 转成DataFrame方便处理
features = ['CPI_mean', 'PMI_mean', 'IR_mean']
df_model = pd.DataFrame(X, columns=features)
df_model['Target'] = y
df_model['Date'] = dates
df_model.set_index('Date', inplace=True)

# ==== 3. 数据集划分（前80%训练，后20%测试）====
split_idx = int(len(df_model) * 0.8)
X_train = df_model.iloc[:split_idx][features]
y_train = df_model.iloc[:split_idx]['Target']
X_test = df_model.iloc[split_idx:][features]
y_test = df_model.iloc[split_idx:]['Target']
test_dates = df_model.iloc[split_idx:].index

# ==== 4. 模型训练 ====
model = LinearRegression()
model.fit(X_train, y_train)

# ==== 5. 预测 ====
y_pred = model.predict(X_test)

# ==== 6. 可视化预测结果 ====
plt.figure(figsize=(14, 6))
plt.plot(test_dates, y_test, label='Actual Forward 1M', linewidth=2)
plt.plot(test_dates, y_pred, label='Predicted Forward 1M (LinearRegression)', linestyle='--')
plt.title("Predicted vs Actual 1M Forward FX Price")
plt.xlabel("Date")
plt.ylabel("FX Price")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# ==== 7. 模型性能评估 ====
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error (Test Set): {mse:.4f}")



import pandas as pd
from pandas.tseries.offsets import BDay

# 指定日期
date = pd.Timestamp("2023-10-07")

# 前30个交易日
date_minus_30bd = date - BDay(30)
print(f"前30个交易日: {date_minus_30bd}")

# 后10个交易日
date_plus_10bd = date + BDay(10)
print(f"后10个交易日: {date_plus_10bd}")


import pandas_market_calendars as mcal

nyse = mcal.get_calendar('NYSE')
schedule = nyse.schedule(start_date='2023-01-01', end_date='2023-12-31')
trading_days = schedule.index

# 找出某日之前30个交易日
ref_date = pd.Timestamp("2023-10-07")
past_30 = trading_days[trading_days < ref_date][-30]
print("第30个交易日前的日期：", past_30)




import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# ==== 1. 模拟数据 ====
np.random.seed(42)
dates = pd.bdate_range(start='2020-01-01', periods=1000)
df = pd.DataFrame(index=dates)
df['CPI'] = np.random.normal(2, 0.05, size=len(df))
df['PMI'] = np.random.normal(50, 1, size=len(df))
df['Interest_Rate'] = np.random.normal(1.5, 0.02, size=len(df))
df['FX_Spot'] = 100 + np.cumsum(np.random.normal(0, 0.2, size=len(df)))
df['FX_Forward_1M'] = df['FX_Spot'] * (1 + 0.0005 * 30)  # 模拟远期价格

# ==== 2. 滑动窗口逐日预测 ====
forecast_start_lag = 180
forecast_end_lag = 30

predictions = []
target_prices = []
prediction_dates = []

model = LinearRegression()  # 也可以替换成任意sklearn模型

for current_idx in range(forecast_start_lag, len(df)):
    current_date = df.index[current_idx]

    # 构造特征窗口 T-180 到 T-30
    start_idx = current_idx - forecast_start_lag
    end_idx = current_idx - forecast_end_lag

    if end_idx <= start_idx:
        continue  # 跳过不满足窗口的情况

    macro_window = df.iloc[start_idx:end_idx][['CPI', 'PMI', 'Interest_Rate']]
    X_sample = macro_window.mean().values.reshape(1, -1)
    
    # 模拟训练集：滑动窗口训练（可选项）
    # 实际中也可以使用全局模型，只用来预测每一天
    X_train = df.iloc[start_idx:end_idx][['CPI', 'PMI', 'Interest_Rate']]
    y_train = df.iloc[start_idx:end_idx]['FX_Forward_1M']
    model.fit(X_train, y_train)  # 滑动训练
    
    # 预测当前交易日远期价格
    pred = model.predict(X_sample)[0]
    actual = df.iloc[current_idx]['FX_Forward_1M']

    predictions.append(pred)
    target_prices.append(actual)
    prediction_dates.append(current_date)

# ==== 3. 构建预测 DataFrame ====
df_pred = pd.DataFrame({
    'Predicted': predictions,
    'Actual': target_prices
}, index=prediction_dates)

# ==== 4. 可视化 ====
plt.figure(figsize=(14,6))
plt.plot(df_pred.index, df_pred['Actual'], label='Actual FX Forward 1M')
plt.plot(df_pred.index, df_pred['Predicted'], label='Predicted', linestyle='--')
plt.title('Daily Rolling Prediction of FX Forward Price (T-180 to T-30)')
plt.xlabel('Date')
plt.ylabel('FX Forward Price')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error

# ==== 1. 模拟数据 ====
np.random.seed(42)
dates = pd.bdate_range(start='2020-01-01', periods=1000)
df = pd.DataFrame(index=dates)
df['CPI'] = np.random.normal(2, 0.05, size=len(df))
df['PMI'] = np.random.normal(50, 1, size=len(df))
df['Interest_Rate'] = np.random.normal(1.5, 0.02, size=len(df))
df['FX_Spot'] = 100 + np.cumsum(np.random.normal(0, 0.2, size=len(df)))
df['FX_Forward_1M'] = df['FX_Spot'] * (1 + 0.0005 * 30)

# ==== 2. 回归器配置 ====
models = {
    'LinearRegression': LinearRegression(),
    'RandomForest': RandomForestRegressor(n_estimators=100, max_depth=5, random_state=42),
    'XGBoost': XGBRegressor(n_estimators=100, max_depth=3, learning_rate=0.1, verbosity=0),
    'SVR': SVR(kernel='rbf', C=1.0, epsilon=0.2)
}

# ==== 3. 滑动窗口预测函数 ====
def rolling_forecast(df, model, start_lag=180, end_lag=30):
    predictions = []
    actuals = []
    dates = []

    for current_idx in range(start_lag, len(df)):
        current_date = df.index[current_idx]

        # 构建窗口
        start_idx = current_idx - start_lag
        end_idx = current_idx - end_lag
        if end_idx <= start_idx:
            continue

        # 滞后窗口特征
        macro_window = df.iloc[start_idx:end_idx][['CPI', 'PMI', 'Interest_Rate']]
        X_sample = macro_window.mean().values.reshape(1, -1)

        # 滑动训练
        X_train = df.iloc[start_idx:end_idx][['CPI', 'PMI', 'Interest_Rate']]
        y_train = df.iloc[start_idx:end_idx]['FX_Forward_1M']
        model.fit(X_train, y_train)

        # 当前日预测
        y_pred = model.predict(X_sample)[0]
        y_actual = df.iloc[current_idx]['FX_Forward_1M']

        predictions.append(y_pred)
        actuals.append(y_actual)
        dates.append(current_date)

    return pd.DataFrame({
        'Date': dates,
        'Predicted': predictions,
        'Actual': actuals
    }).set_index('Date')

# ==== 4. 多模型预测 ====
results = {}
for name, model in models.items():
    print(f"Running model: {name}")
    results[name] = rolling_forecast(df, model)

# ==== 5. 可视化对比 ====
plt.figure(figsize=(14, 6))
for name, result_df in results.items():
    plt.plot(result_df.index, result_df['Predicted'], label=f'{name} Prediction', alpha=0.7)

plt.plot(result_df.index, result_df['Actual'], label='Actual FX Forward', color='black', linewidth=2)
plt.title("FX Forward Price Prediction by Different Models")
plt.xlabel("Date")
plt.ylabel("FX Forward Price")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# ==== 6. MSE对比 ====
print("Model Performance (MSE):")
for name, result_df in results.items():
    mse = mean_squared_error(result_df['Actual'], result_df['Predicted'])
    print(f"{name:16}: {mse:.6f}")
High-Level Summary of Accomplishments

During my first four months as a junior trader on the offshore RMB rates desk, I have demonstrated strong growth in both technical and market expertise while contributing meaningfully to the team’s analytical and operational efficiency. I independently led several research initiatives—including the development of a CPI forecasting model, liquidity analysis of the RMB market, curve construction for pricers, and NDD spread studies—which have enhanced our understanding of macro drivers and improved pricing accuracy. I took ownership of daily risk monitoring by ensuring timely P&L reconciliation, adherence to supervisory sign-offs, and proactive communication of potential risk exposures. Operationally, I streamlined internal booking and trade unwind processes, and established a structured client inquiry tracker to better anticipate client flows and trading opportunities. Beyond daily tasks, I consistently engaged with traders and risk partners to deepen my understanding of cross-currency swap dynamics and responsible risk-taking. Overall, I have grown from a learner to a contributing team member who brings data-driven insight, operational discipline, and analytical rigor to the offshore RMB business.
